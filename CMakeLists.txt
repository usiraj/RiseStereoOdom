cmake_minimum_required(VERSION 2.4.6)
include($ENV{ROS_ROOT}/core/rosbuild/rosbuild.cmake)

# Set the build type.  Options are:
#  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage
#  Debug          : w/ debug symbols, w/o optimization
#  Release        : w/o debug symbols, w/ optimization
#  RelWithDebInfo : w/ debug symbols, w/ optimization
#  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries
#set(ROS_BUILD_TYPE RelWithDebInfo)

rosbuild_init()
set(RISEODOM_ROOT ${PROJECT_SOURCE_DIR})
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${RISEODOM_ROOT}/lib/cmake)

#set the default path for built executables to the "bin" directory
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
#set the default path for built libraries to the "lib" directory
set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)

find_package( OpenCV REQUIRED )
find_package( RiseOdom REQUIRED )
#uncomment if you have defined messages
rosbuild_genmsg()
#uncomment if you have defined services
#rosbuild_gensrv()
include_directories(${RISEODOM_INCLUDE_DIR})
message(STATUS "riseodoom headers : ${RISEODOM_INCLUDE_DIR}")
message(STATUS "riseodom libs : ${RISEODOM_LIBRARY}")

#common commands for building c++ executables and libraries
rosbuild_add_executable(publishdataset  src/publishdataset.cpp)
target_link_libraries(publishdataset ${RISEODOM_LIBRARY})

rosbuild_add_library(libpubcampts src/ROSCamPoints.cpp src/ROSRiseOdom.cpp )
rosbuild_add_executable(publishcampoints src/publishcampoints.cpp )
target_link_libraries(publishcampoints libpubcampts ${RISEODOM_LIBRARY})

rosbuild_add_executable(stereoodom src/stereoodom.cpp)
target_link_libraries(stereoodom libpubcampts ${RISEODOM_LIBRARY})

