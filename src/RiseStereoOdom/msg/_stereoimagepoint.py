"""autogenerated by genpy from RiseStereoOdom/stereoimagepoint.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class stereoimagepoint(genpy.Message):
  _md5sum = "9107f1c401b78ef97aa48a2eb5888a3e"
  _type = "RiseStereoOdom/stereoimagepoint"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 lX
float32 lY
float32 rX
float32 rY
geometry_msgs/Point32 point
bool invalid

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
"""
  __slots__ = ['lX','lY','rX','rY','point','invalid']
  _slot_types = ['float32','float32','float32','float32','geometry_msgs/Point32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lX,lY,rX,rY,point,invalid

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(stereoimagepoint, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.lX is None:
        self.lX = 0.
      if self.lY is None:
        self.lY = 0.
      if self.rX is None:
        self.rX = 0.
      if self.rY is None:
        self.rY = 0.
      if self.point is None:
        self.point = geometry_msgs.msg.Point32()
      if self.invalid is None:
        self.invalid = False
    else:
      self.lX = 0.
      self.lY = 0.
      self.rX = 0.
      self.rY = 0.
      self.point = geometry_msgs.msg.Point32()
      self.invalid = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_7fB.pack(_x.lX, _x.lY, _x.rX, _x.rY, _x.point.x, _x.point.y, _x.point.z, _x.invalid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.point is None:
        self.point = geometry_msgs.msg.Point32()
      end = 0
      _x = self
      start = end
      end += 29
      (_x.lX, _x.lY, _x.rX, _x.rY, _x.point.x, _x.point.y, _x.point.z, _x.invalid,) = _struct_7fB.unpack(str[start:end])
      self.invalid = bool(self.invalid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_7fB.pack(_x.lX, _x.lY, _x.rX, _x.rY, _x.point.x, _x.point.y, _x.point.z, _x.invalid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.point is None:
        self.point = geometry_msgs.msg.Point32()
      end = 0
      _x = self
      start = end
      end += 29
      (_x.lX, _x.lY, _x.rX, _x.rY, _x.point.x, _x.point.y, _x.point.z, _x.invalid,) = _struct_7fB.unpack(str[start:end])
      self.invalid = bool(self.invalid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_7fB = struct.Struct("<7fB")
