"""autogenerated by genpy from RiseStereoOdom/camstereopoints.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import RiseStereoOdom.msg
import std_msgs.msg

class camstereopoints(genpy.Message):
  _md5sum = "3e88a25f68ebb97596136496b24ddb8f"
  _type = "RiseStereoOdom/camstereopoints"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
float64 focus
float64 baseline
float64[9] camintrinsic
RiseStereoOdom/freakdescriptor[] descriptors
RiseStereoOdom/stereoimagepoint[] points

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: RiseStereoOdom/freakdescriptor
int32[16] descriptor

================================================================================
MSG: RiseStereoOdom/stereoimagepoint
float32 lX
float32 lY
float32 rX
float32 rY
geometry_msgs/Point32 point
bool invalid

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
"""
  __slots__ = ['header','focus','baseline','camintrinsic','descriptors','points']
  _slot_types = ['std_msgs/Header','float64','float64','float64[9]','RiseStereoOdom/freakdescriptor[]','RiseStereoOdom/stereoimagepoint[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,focus,baseline,camintrinsic,descriptors,points

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(camstereopoints, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.focus is None:
        self.focus = 0.
      if self.baseline is None:
        self.baseline = 0.
      if self.camintrinsic is None:
        self.camintrinsic = [0.,0.,0.,0.,0.,0.,0.,0.,0.]
      if self.descriptors is None:
        self.descriptors = []
      if self.points is None:
        self.points = []
    else:
      self.header = std_msgs.msg.Header()
      self.focus = 0.
      self.baseline = 0.
      self.camintrinsic = [0.,0.,0.,0.,0.,0.,0.,0.,0.]
      self.descriptors = []
      self.points = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2d.pack(_x.focus, _x.baseline))
      buff.write(_struct_9d.pack(*self.camintrinsic))
      length = len(self.descriptors)
      buff.write(_struct_I.pack(length))
      for val1 in self.descriptors:
        buff.write(_struct_16i.pack(*val1.descriptor))
      length = len(self.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.points:
        _x = val1
        buff.write(_struct_4f.pack(_x.lX, _x.lY, _x.rX, _x.rY))
        _v1 = val1.point
        _x = _v1
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_B.pack(val1.invalid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.descriptors is None:
        self.descriptors = None
      if self.points is None:
        self.points = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.focus, _x.baseline,) = _struct_2d.unpack(str[start:end])
      start = end
      end += 72
      self.camintrinsic = _struct_9d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.descriptors = []
      for i in range(0, length):
        val1 = RiseStereoOdom.msg.freakdescriptor()
        start = end
        end += 64
        val1.descriptor = _struct_16i.unpack(str[start:end])
        self.descriptors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.points = []
      for i in range(0, length):
        val1 = RiseStereoOdom.msg.stereoimagepoint()
        _x = val1
        start = end
        end += 16
        (_x.lX, _x.lY, _x.rX, _x.rY,) = _struct_4f.unpack(str[start:end])
        _v2 = val1.point
        _x = _v2
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        start = end
        end += 1
        (val1.invalid,) = _struct_B.unpack(str[start:end])
        val1.invalid = bool(val1.invalid)
        self.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2d.pack(_x.focus, _x.baseline))
      buff.write(self.camintrinsic.tostring())
      length = len(self.descriptors)
      buff.write(_struct_I.pack(length))
      for val1 in self.descriptors:
        buff.write(val1.descriptor.tostring())
      length = len(self.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.points:
        _x = val1
        buff.write(_struct_4f.pack(_x.lX, _x.lY, _x.rX, _x.rY))
        _v3 = val1.point
        _x = _v3
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_B.pack(val1.invalid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.descriptors is None:
        self.descriptors = None
      if self.points is None:
        self.points = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.focus, _x.baseline,) = _struct_2d.unpack(str[start:end])
      start = end
      end += 72
      self.camintrinsic = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.descriptors = []
      for i in range(0, length):
        val1 = RiseStereoOdom.msg.freakdescriptor()
        start = end
        end += 64
        val1.descriptor = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=16)
        self.descriptors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.points = []
      for i in range(0, length):
        val1 = RiseStereoOdom.msg.stereoimagepoint()
        _x = val1
        start = end
        end += 16
        (_x.lX, _x.lY, _x.rX, _x.rY,) = _struct_4f.unpack(str[start:end])
        _v4 = val1.point
        _x = _v4
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        start = end
        end += 1
        (val1.invalid,) = _struct_B.unpack(str[start:end])
        val1.invalid = bool(val1.invalid)
        self.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
_struct_16i = struct.Struct("<16i")
_struct_9d = struct.Struct("<9d")
_struct_2d = struct.Struct("<2d")
_struct_3I = struct.Struct("<3I")
_struct_4f = struct.Struct("<4f")
_struct_3f = struct.Struct("<3f")
